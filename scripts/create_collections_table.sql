-- Create the collections table
CREATE TABLE public.collections (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL DEFAULT auth.uid(),
    name text NOT NULL,
    icon text NOT NULL,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add comments to columns
COMMENT ON TABLE public.collections IS 'Stores user collections for organizing items.';
COMMENT ON COLUMN public.collections.user_id IS 'Links to the authenticated user who owns the collection.';
COMMENT ON COLUMN public.collections.name IS 'Name of the collection.';
COMMENT ON COLUMN public.collections.icon IS 'Emoji icon representing the collection.';

-- Enable Row Level Security (RLS)
ALTER TABLE public.collections ENABLE ROW LEVEL SECURITY;

-- Policy: Allow users to view their own collections
CREATE POLICY "Allow individual read access"
ON public.collections
FOR SELECT
USING (auth.uid() = user_id);

-- Policy: Allow users to insert their own collections
CREATE POLICY "Allow individual insert access"
ON public.collections
FOR INSERT
WITH CHECK (auth.uid() = user_id);

-- Policy: Allow users to update their own collections
CREATE POLICY "Allow individual update access"
ON public.collections
FOR UPDATE
USING (auth.uid() = user_id)
WITH CHECK (auth.uid() = user_id);

-- Policy: Allow users to delete their own collections
CREATE POLICY "Allow individual delete access"
ON public.collections
FOR DELETE
USING (auth.uid() = user_id);

-- Add collection_id to items table
ALTER TABLE public.items 
ADD COLUMN collection_id bigint REFERENCES public.collections(id) ON DELETE SET NULL;

COMMENT ON COLUMN public.items.collection_id IS 'Links to the collection this item belongs to.';
